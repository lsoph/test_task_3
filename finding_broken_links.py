# -*- coding: utf-8 -*-
"""Задание_3_Лобенко.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JVO2FHvXeR6KT5y8SdFmZ5kMYgN0b0k1
"""

! pip install fake-useragent
! pip install PrettyTable
! pip install validators

import requests
import urllib.request
import lxml.html
from prettytable import PrettyTable
from tqdm import tqdm
import validators
from fake_useragent import UserAgent

# функция, которая создает список всех ссылок с веб-страницы, 
# если принимает в аргумент URL, а если в качетве аргумента список
# ссылок, то просто возвращает его же без изменений

def listOfLinks(input):
  if (type(input) is list):
    return input
  
  elif (validators.url(input)):
    url = input
    connection = urllib.request.urlopen(url)
    dom =  lxml.html.fromstring(connection.read())

    links = []
    for link in dom.xpath('//a/@href'):
      if not link.startswith('http'):
        full_link = url + link
        links.append(full_link)
      else:
        links.append(link)
    return links
  
  else:
    return 0

# функция, которая проверяет список ссылок
# и выводит битые ссылки в формате таблицы

def findingBrokenLinks(input):
  links = listOfLinks(input)

  ua = UserAgent()
  header = {'User-Agent': ua.random}

  th = ['Код страницы', 'Ссылка']
  td = []

  for link in tqdm(links):
    try:
      r = requests.head(link, headers=header, timeout=5)
      if (r.status_code >= 400):
        td.append(r.status_code)
        td.append(link)
    except:
      message = 'Не удалось подключиться'
      td.append(message)
      td.append(link) 

  columns = len(th)
  table = PrettyTable(th)
  td_data = td[:]

  while td_data:
    # (columns = 2).
      table.add_row(td_data[:columns])
      td_data = td_data[columns:]

  print('\n\n', table)